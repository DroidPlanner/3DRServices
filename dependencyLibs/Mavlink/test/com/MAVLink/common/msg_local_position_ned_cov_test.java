/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */
         
// MESSAGE LOCAL_POSITION_NED_COV PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Parser;
import com.MAVLink.ardupilotmega.CRC;
import java.nio.ByteBuffer;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;

/**
* The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
*/
public class msg_local_position_ned_cov_test{

public static final int MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV = 64;
public static final int MAVLINK_MSG_LENGTH = 181;
private static final long serialVersionUID = MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV;

private Parser parser = new Parser();

public CRC generateCRC(byte[] packet){
    CRC crc = new CRC();
    for (int i = 1; i < packet.length - 2; i++) {
        crc.update_checksum(packet[i] & 0xFF);
    }
    crc.finish_checksum(MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV);
    return crc;
}

public byte[] generateTestPacket(){
    ByteBuffer payload = ByteBuffer.allocate(6 + MAVLINK_MSG_LENGTH + 2);
    payload.put((byte)MAVLinkPacket.MAVLINK_STX); //stx
    payload.put((byte)MAVLINK_MSG_LENGTH); //len
    payload.put((byte)0); //seq
    payload.put((byte)255); //sysid
    payload.put((byte)190); //comp id
    payload.put((byte)MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV); //msg id
    payload.putLong((long)93372036854775807L); //time_utc
    payload.putInt((int)963497880); //time_boot_ms
    payload.putFloat((float)101.0); //x
    payload.putFloat((float)129.0); //y
    payload.putFloat((float)157.0); //z
    payload.putFloat((float)185.0); //vx
    payload.putFloat((float)213.0); //vy
    payload.putFloat((float)241.0); //vz
    //covariance
    payload.putFloat((float)269.0);
    payload.putFloat((float)270.0);
    payload.putFloat((float)271.0);
    payload.putFloat((float)272.0);
    payload.putFloat((float)273.0);
    payload.putFloat((float)274.0);
    payload.putFloat((float)275.0);
    payload.putFloat((float)276.0);
    payload.putFloat((float)277.0);
    payload.putFloat((float)278.0);
    payload.putFloat((float)279.0);
    payload.putFloat((float)280.0);
    payload.putFloat((float)281.0);
    payload.putFloat((float)282.0);
    payload.putFloat((float)283.0);
    payload.putFloat((float)284.0);
    payload.putFloat((float)285.0);
    payload.putFloat((float)286.0);
    payload.putFloat((float)287.0);
    payload.putFloat((float)288.0);
    payload.putFloat((float)289.0);
    payload.putFloat((float)290.0);
    payload.putFloat((float)291.0);
    payload.putFloat((float)292.0);
    payload.putFloat((float)293.0);
    payload.putFloat((float)294.0);
    payload.putFloat((float)295.0);
    payload.putFloat((float)296.0);
    payload.putFloat((float)297.0);
    payload.putFloat((float)298.0);
    payload.putFloat((float)299.0);
    payload.putFloat((float)300.0);
    payload.putFloat((float)301.0);
    payload.putFloat((float)302.0);
    payload.putFloat((float)303.0);
    payload.putFloat((float)304.0);
    payload.put((byte)33); //estimator_type
    
    CRC crc = generateCRC(payload.array());
    payload.put((byte)crc.getLSB());
    payload.put((byte)crc.getMSB());
    return payload.array();
}

@Test
public void test(){
    byte[] packet = generateTestPacket();
    for(int i = 0; i < packet.length - 1; i++){
        parser.mavlink_parse_char(packet[i] & 0xFF);
    }
    MAVLinkPacket m = parser.mavlink_parse_char(packet[packet.length - 1] & 0xFF);
    byte[] processedPacket = m.encodePacket();
    assertArrayEquals("msg_local_position_ned_cov", processedPacket, packet);
}
}
        